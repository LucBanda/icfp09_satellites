#include "bin.h"
#ifndef GENERATE 
void bin_2::step() {
memory[1] = memory[400];
memory[4] = memory[379];
memory[5] = memory[4] - memory[3];
status = (memory[5] ==  0);
if (status) memory[7]= memory[2]; else memory[7] = memory[1];
memory[8] = memory[7] - memory[0];
memory[9] = memory[398];
status = (memory[5] ==  0);
if (status) memory[11]= memory[0]; else memory[11] = memory[9];
memory[12] = memory[11] - memory[0];
status = (memory[12] ==  0);
if (status) memory[14]= memory[8]; else memory[14] = memory[7];
memory[16] = memory[399];
status = (memory[5] ==  0);
if (status) memory[19]= memory[17]; else memory[19] = memory[16];
memory[20] = memory[19] * memory[15];
status = (memory[12] ==  0);
if (status) memory[22]= memory[20]; else memory[22] = memory[19];
status = (memory[12] ==  0);
if (status) memory[24]= memory[19]; else memory[24] = memory[12];
memory[25] = memory[396];
memory[26] = memory[391];
memory[30] = input_ports[16000];
memory[31] = memory[30] - memory[29];
status = (memory[31] ==  0);
if (status) memory[33]= memory[28]; else memory[33] = memory[3];
memory[35] = memory[30] - memory[34];
status = (memory[35] ==  0);
if (status) memory[37]= memory[27]; else memory[37] = memory[33];
memory[40] = memory[30] - memory[39];
status = (memory[40] ==  0);
if (status) memory[42]= memory[38]; else memory[42] = memory[37];
memory[44] = memory[30] - memory[43];
status = (memory[44] ==  0);
if (status) memory[46]= memory[27]; else memory[46] = memory[42];
status = (memory[5] ==  0);
if (status) memory[48]= memory[46]; else memory[48] = memory[26];
memory[49] = memory[381];
status = (memory[5] ==  0);
if (status) memory[51]= memory[3]; else memory[51] = memory[49];
memory[52] = memory[51] - memory[48];
memory[53] = memory[52] * memory[52];
memory[54] = memory[390];
status = (memory[31] ==  0);
if (status) memory[56]= memory[27]; else memory[56] = memory[3];
status = (memory[35] ==  0);
if (status) memory[59]= memory[57]; else memory[59] = memory[56];
status = (memory[40] ==  0);
if (status) memory[62]= memory[60]; else memory[62] = memory[59];
status = (memory[44] ==  0);
if (status) memory[64]= memory[28]; else memory[64] = memory[62];
status = (memory[5] ==  0);
if (status) memory[66]= memory[64]; else memory[66] = memory[54];
memory[67] = memory[380];
status = (memory[5] ==  0);
if (status) memory[69]= memory[3]; else memory[69] = memory[67];
memory[70] = memory[69] - memory[66];
memory[71] = memory[70] * memory[70];
memory[72] = memory[71] + memory[53];
memory[73] = sqrt(memory[72]);
memory[74] = memory[73] * memory[73];
memory[75] = memory[74] * memory[73];
memory[77] = memory[382];
status = (memory[5] ==  0);
if (status) memory[80]= memory[78]; else memory[80] = memory[77];
memory[81] = memory[76] * memory[80];
memory[82] = (memory[75] == 0)? 0 : memory[81] / memory[75];
memory[83] = memory[52] * memory[82];
memory[84] = (memory[0] == 0)? 0 : memory[0] / memory[0];
memory[85] = memory[84] * memory[84];
memory[86] = (memory[15] == 0)? 0 : memory[85] / memory[15];
memory[87] = memory[83] * memory[86];
memory[88] = memory[394];
status = (memory[35] ==  0);
if (status) memory[91]= memory[89]; else memory[91] = memory[56];
status = (memory[40] ==  0);
if (status) memory[94]= memory[92]; else memory[94] = memory[91];
status = (memory[44] ==  0);
if (status) memory[97]= memory[95]; else memory[97] = memory[94];
status = (memory[5] ==  0);
if (status) memory[99]= memory[97]; else memory[99] = memory[88];
memory[100] = memory[99] * memory[84];
memory[101] = memory[48] + memory[100];
memory[102] = memory[101] + memory[87];
memory[103] = memory[386];
memory[105] = memory[29] + memory[17];
memory[106] = memory[30] - memory[105];
status = (memory[106] ==  0);
if (status) memory[108]= memory[104]; else memory[108] = memory[3];
memory[109] = memory[34] + memory[17];
memory[110] = memory[30] - memory[109];
status = (memory[110] ==  0);
if (status) memory[112]= memory[27]; else memory[112] = memory[108];
memory[113] = memory[39] + memory[17];
memory[114] = memory[30] - memory[113];
status = (memory[114] ==  0);
if (status) memory[116]= memory[38]; else memory[116] = memory[112];
memory[117] = memory[43] + memory[17];
memory[118] = memory[30] - memory[117];
status = (memory[118] ==  0);
if (status) memory[120]= memory[27]; else memory[120] = memory[116];
status = (memory[31] ==  0);
if (status) memory[122]= memory[104]; else memory[122] = memory[120];
status = (memory[35] ==  0);
if (status) memory[124]= memory[27]; else memory[124] = memory[122];
status = (memory[40] ==  0);
if (status) memory[126]= memory[38]; else memory[126] = memory[124];
status = (memory[44] ==  0);
if (status) memory[128]= memory[27]; else memory[128] = memory[126];
status = (memory[5] ==  0);
if (status) memory[130]= memory[128]; else memory[130] = memory[103];
memory[131] = memory[51] - memory[130];
memory[132] = memory[131] * memory[131];
memory[133] = memory[385];
status = (memory[106] ==  0);
if (status) memory[135]= memory[27]; else memory[135] = memory[3];
status = (memory[110] ==  0);
if (status) memory[137]= memory[28]; else memory[137] = memory[135];
status = (memory[114] ==  0);
if (status) memory[140]= memory[138]; else memory[140] = memory[137];
status = (memory[118] ==  0);
if (status) memory[143]= memory[141]; else memory[143] = memory[140];
status = (memory[31] ==  0);
if (status) memory[145]= memory[27]; else memory[145] = memory[143];
status = (memory[35] ==  0);
if (status) memory[147]= memory[28]; else memory[147] = memory[145];
status = (memory[40] ==  0);
if (status) memory[149]= memory[138]; else memory[149] = memory[147];
status = (memory[44] ==  0);
if (status) memory[151]= memory[141]; else memory[151] = memory[149];
status = (memory[5] ==  0);
if (status) memory[153]= memory[151]; else memory[153] = memory[133];
memory[154] = memory[69] - memory[153];
memory[155] = memory[154] * memory[154];
memory[156] = memory[155] + memory[132];
memory[157] = sqrt(memory[156]);
memory[158] = memory[157] * memory[157];
memory[159] = memory[158] * memory[157];
memory[160] = (memory[159] == 0)? 0 : memory[81] / memory[159];
memory[161] = memory[131] * memory[160];
memory[162] = input_ports[3];
memory[163] = (memory[84] == 0)? 0 : memory[162] / memory[84];
memory[164] = memory[163] + memory[161];
memory[165] = memory[164] * memory[86];
memory[166] = memory[389];
status = (memory[110] ==  0);
if (status) memory[168]= memory[95]; else memory[168] = memory[135];
status = (memory[114] ==  0);
if (status) memory[171]= memory[169]; else memory[171] = memory[168];
status = (memory[118] ==  0);
if (status) memory[174]= memory[172]; else memory[174] = memory[171];
status = (memory[31] ==  0);
if (status) memory[176]= memory[27]; else memory[176] = memory[174];
status = (memory[35] ==  0);
if (status) memory[178]= memory[95]; else memory[178] = memory[176];
status = (memory[40] ==  0);
if (status) memory[180]= memory[169]; else memory[180] = memory[178];
status = (memory[44] ==  0);
if (status) memory[182]= memory[172]; else memory[182] = memory[180];
status = (memory[5] ==  0);
if (status) memory[184]= memory[182]; else memory[184] = memory[166];
memory[185] = memory[184] * memory[84];
memory[186] = memory[130] + memory[185];
memory[187] = memory[186] + memory[165];
memory[188] = memory[187] - memory[102];
memory[189] = memory[188] * memory[188];
memory[190] = memory[70] * memory[82];
memory[191] = memory[190] * memory[86];
memory[192] = memory[393];
status = (memory[31] ==  0);
if (status) memory[195]= memory[193]; else memory[195] = memory[3];
status = (memory[35] ==  0);
if (status) memory[197]= memory[27]; else memory[197] = memory[195];
status = (memory[40] ==  0);
if (status) memory[200]= memory[198]; else memory[200] = memory[197];
status = (memory[44] ==  0);
if (status) memory[202]= memory[27]; else memory[202] = memory[200];
status = (memory[5] ==  0);
if (status) memory[204]= memory[202]; else memory[204] = memory[192];
memory[205] = memory[204] * memory[84];
memory[206] = memory[66] + memory[205];
memory[207] = memory[206] + memory[191];
memory[208] = memory[154] * memory[160];
memory[209] = input_ports[2];
memory[210] = (memory[84] == 0)? 0 : memory[209] / memory[84];
memory[211] = memory[210] + memory[208];
memory[212] = memory[211] * memory[86];
memory[213] = memory[388];
status = (memory[106] ==  0);
if (status) memory[216]= memory[214]; else memory[216] = memory[3];
status = (memory[110] ==  0);
if (status) memory[218]= memory[27]; else memory[218] = memory[216];
status = (memory[114] ==  0);
if (status) memory[220]= memory[169]; else memory[220] = memory[218];
status = (memory[118] ==  0);
if (status) memory[222]= memory[27]; else memory[222] = memory[220];
status = (memory[31] ==  0);
if (status) memory[224]= memory[214]; else memory[224] = memory[222];
status = (memory[35] ==  0);
if (status) memory[226]= memory[27]; else memory[226] = memory[224];
status = (memory[40] ==  0);
if (status) memory[228]= memory[169]; else memory[228] = memory[226];
status = (memory[44] ==  0);
if (status) memory[230]= memory[27]; else memory[230] = memory[228];
status = (memory[5] ==  0);
if (status) memory[232]= memory[230]; else memory[232] = memory[213];
memory[233] = memory[232] * memory[84];
memory[234] = memory[153] + memory[233];
memory[235] = memory[234] + memory[212];
memory[236] = memory[235] - memory[207];
memory[237] = memory[236] * memory[236];
memory[238] = memory[237] + memory[189];
memory[239] = sqrt(memory[238]);
memory[240] = memory[25] + memory[239];
memory[241] = memory[163] * memory[163];
memory[242] = memory[210] * memory[210];
memory[243] = memory[242] + memory[241];
memory[244] = sqrt(memory[243]);
memory[245] = memory[244] - memory[3];
status = (memory[245] ==  0);
if (status) memory[247]= memory[240]; else memory[247] = memory[3];
memory[248] = memory[239] - memory[17];
status = (memory[248] <  0);
if (status) memory[250]= memory[247]; else memory[250] = memory[3];
memory[251] = memory[51] - memory[102];
memory[252] = memory[251] * memory[251];
memory[253] = memory[69] - memory[207];
memory[254] = memory[253] * memory[253];
memory[255] = memory[254] + memory[252];
memory[256] = sqrt(memory[255]);
memory[257] = memory[256] * memory[256];
memory[258] = memory[257] * memory[256];
memory[259] = (memory[258] == 0)? 0 : memory[81] / memory[258];
memory[260] = memory[251] * memory[259];
memory[261] = memory[260] + memory[83];
memory[262] = (memory[15] == 0)? 0 : memory[261] / memory[15];
memory[263] = memory[262] * memory[84];
memory[264] = memory[99] + memory[263];
memory[265] = memory[253] * memory[259];
memory[266] = memory[265] + memory[190];
memory[267] = (memory[15] == 0)? 0 : memory[266] / memory[15];
memory[268] = memory[267] * memory[84];
memory[269] = memory[204] + memory[268];
memory[270] = memory[392];
status = (memory[31] ==  0);
if (status) memory[273]= memory[271]; else memory[273] = memory[3];
status = (memory[35] ==  0);
if (status) memory[275]= memory[271]; else memory[275] = memory[273];
status = (memory[40] ==  0);
if (status) memory[277]= memory[271]; else memory[277] = memory[275];
status = (memory[44] ==  0);
if (status) memory[279]= memory[271]; else memory[279] = memory[277];
status = (memory[5] ==  0);
if (status) memory[281]= memory[279]; else memory[281] = memory[270];
memory[282] = memory[51] - memory[187];
memory[283] = memory[282] * memory[282];
memory[284] = memory[69] - memory[235];
memory[285] = memory[284] * memory[284];
memory[286] = memory[285] + memory[283];
memory[287] = sqrt(memory[286]);
memory[288] = memory[287] * memory[287];
memory[289] = memory[288] * memory[287];
memory[290] = (memory[289] == 0)? 0 : memory[81] / memory[289];
memory[291] = memory[282] * memory[290];
memory[292] = memory[291] + memory[161];
memory[293] = (memory[15] == 0)? 0 : memory[292] / memory[15];
memory[294] = memory[163] + memory[293];
memory[295] = memory[294] * memory[84];
memory[296] = memory[184] + memory[295];
memory[297] = memory[284] * memory[290];
memory[298] = memory[297] + memory[208];
memory[299] = (memory[15] == 0)? 0 : memory[298] / memory[15];
memory[300] = memory[210] + memory[299];
memory[301] = memory[300] * memory[84];
memory[302] = memory[232] + memory[301];
memory[303] = memory[387];
status = (memory[106] ==  0);
if (status) memory[305]= memory[271]; else memory[305] = memory[3];
status = (memory[110] ==  0);
if (status) memory[307]= memory[271]; else memory[307] = memory[305];
status = (memory[114] ==  0);
if (status) memory[309]= memory[271]; else memory[309] = memory[307];
status = (memory[118] ==  0);
if (status) memory[311]= memory[271]; else memory[311] = memory[309];
status = (memory[31] ==  0);
if (status) memory[313]= memory[271]; else memory[313] = memory[311];
status = (memory[35] ==  0);
if (status) memory[315]= memory[271]; else memory[315] = memory[313];
status = (memory[40] ==  0);
if (status) memory[317]= memory[271]; else memory[317] = memory[315];
status = (memory[44] ==  0);
if (status) memory[319]= memory[271]; else memory[319] = memory[317];
status = (memory[5] ==  0);
if (status) memory[321]= memory[319]; else memory[321] = memory[303];
memory[322] = memory[384];
status = (memory[5] ==  0);
if (status) memory[324]= memory[3]; else memory[324] = memory[322];
memory[325] = memory[383];
status = (memory[5] ==  0);
if (status) memory[327]= memory[3]; else memory[327] = memory[325];
memory[328] = memory[4] + memory[0];
memory[329] = memory[102] - memory[187];
memory[330] = memory[207] - memory[235];
memory[331] = memory[395];
memory[332] = memory[331] + memory[0];
status = (memory[245] ==  0);
if (status) memory[334]= memory[332]; else memory[334] = memory[3];
status = (memory[248] <  0);
if (status) memory[336]= memory[334]; else memory[336] = memory[3];
memory[337] = memory[397];
status = (memory[5] ==  0);
if (status) memory[340]= memory[338]; else memory[340] = memory[337];
memory[341] = memory[244] * memory[84];
memory[342] = memory[340] - memory[341];
memory[345] = (memory[338] == 0)? 0 : memory[342] / memory[338];
memory[346] = memory[345] * memory[344];
memory[347] = memory[7] + memory[346];
memory[348] = memory[347] + memory[343];
memory[349] = memory[348] * memory[15];
memory[351] = (memory[84] == 0)? 0 : memory[350] / memory[84];
memory[352] = memory[351] - memory[336];
status = (memory[352] <  0);
if (status) memory[354]= memory[349]; else memory[354] = memory[3];
memory[355] = memory[342] - memory[3];
memory[356] = memory[372] - memory[0];
status = (memory[355] <  0);
if (status) memory[358]= memory[356]; else memory[358] = memory[354];
memory[359] = memory[338] - memory[341];
status = (memory[359] <  0);
if (status) memory[361]= memory[356]; else memory[361] = memory[358];
memory[363] = memory[187] - memory[51];
memory[364] = memory[363] * memory[363];
memory[365] = memory[235] - memory[69];
memory[366] = memory[365] * memory[365];
memory[367] = memory[366] + memory[364];
memory[368] = sqrt(memory[367]);
memory[369] = memory[368] - memory[362];
status = (memory[369] <  0);
if (status) memory[371]= memory[356]; else memory[371] = memory[361];
output_ports[0] = memory[371];
output_ports[1] = memory[342];
output_ports[2] = memory[284];
output_ports[3] = memory[282];
output_ports[4] = memory[330];
output_ports[5] = memory[329];
memory[379] = memory[328];
memory[380] = memory[69];
memory[381] = memory[51];
memory[382] = memory[80];
memory[383] = memory[327];
memory[384] = memory[324];
memory[385] = memory[235];
memory[386] = memory[187];
memory[387] = memory[321];
memory[388] = memory[302];
memory[389] = memory[296];
memory[390] = memory[207];
memory[391] = memory[102];
memory[392] = memory[281];
memory[393] = memory[269];
memory[394] = memory[264];
memory[395] = memory[336];
memory[396] = memory[250];
memory[397] = memory[342];
memory[398] = memory[24];
memory[399] = memory[22];
memory[400] = memory[14];
}
#endif
